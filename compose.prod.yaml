# =====EXAMPLE======

# services:
# postgres:
#   image: postgres:17
#   container_name: postgres
#   environment:
#     POSTGRES_USER: ${POSTGRES_USER}
#     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#     POSTGRES_DB: ${POSTGRES_DB}
#   volumes:
#     - postgres_data:/var/lib/postgresql/data
#   networks:
#     - app_network
#   restart: always
#   healthcheck:
#     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
#     interval: 5s
#     timeout: 5s
#     retries: 5

# backend:
#   build:
#     context: ./backend
#     target: production
#   container_name: backend
#   command: sh -c "npx prisma migrate deploy && npm run start:prod"
#   environment:
#     DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public"
#     NODE_ENV: production
#   depends_on:
#     postgres:
#       condition: service_healthy
#   networks:
#     - app_network
#   restart: always

# frontend:
#   build:
#     context: ./frontend
#     target: production
#   container_name: frontend
#   environment:
#     VITE_API_URL: "/api"
#   networks:
#     - app_network
#   restart: always

# nginx:
#   image: nginx:alpine
#   container_name: nginx
#   ports:
#     - "80:80"
#     - "443:443"
#   volumes:
#     - ./nginx/nginx-prod.conf:/etc/nginx/conf.d/default.conf
#     - ./certs:/etc/nginx/certs
#   depends_on:
#     - frontend
#     - backend
#   networks:
#     - app_network
#   restart: always

# volumes:
# postgres_data:

# networks:
# app_network:

# =================================== OR ======================================

# services:
#   postgres:
#     image: postgres:17
#     container_name: postgres
#     environment:
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_DB: ${POSTGRES_DB}
#     # Убираем проброс портов в продакшене
#     # ports:
#     #   - "${PORT}:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     networks:
#       - app-network
#     restart: unless-stopped

#   backend:
#     build:
#       context: ./backend
#       target: production  # ✅ Меняем на production
#     command: sh -c "npx prisma migrate deploy && npm run start:prod"  # ✅ Продакшен команда
#     container_name: backend
#     # Убираем volumes для продакшена (код должен быть в образе)
#     # volumes:
#     #   - ./backend:/app
#     #   - backend_node_modules:/app/node_modules
#     # Убираем проброс порта
#     expose:
#       - "4200"
#     depends_on:
#       - postgres
#     environment:
#       DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public"
#       NODE_ENV: production
#     env_file:
#       - ./backend/.env.production  # ✅ Продакшен env файл
#     networks:
#       - app-network
#     restart: unless-stopped

#   frontend:
#     build:
#       context: ./frontend
#       target: production  # ✅ Меняем на production
#     container_name: frontend
#     # Убираем volumes для продакшена
#     # volumes:
#     #   - ./frontend:/app
#     #   - frontend_node_modules:/app/node_modules
#     # Убираем проброс порта
#     expose:
#       - "3000"
#     depends_on:
#       - backend
#     environment:
#       VITE_API_URL: "/api"
#       NODE_ENV: production
#     env_file:
#       - ./frontend/.env.production  # ✅ Продакшен env файл
#     networks:
#       - app-network
#     restart: unless-stopped

#   nginx:
#     image: nginx:alpine
#     container_name: nginx
#     ports:
#       - "80:80"
#       - "443:443"  # ✅ Добавляем HTTPS
#     volumes:
#       - ./nginx/nginx-prod.conf:/etc/nginx/conf.d/default.conf
#       - ./ssl:/etc/nginx/ssl:ro  # ✅ SSL сертификаты
#     depends_on:
#       - frontend
#       - backend
#     networks:
#       - app-network
#     restart: unless-stopped

#   # Убираем pgadmin из продакшена
#   # pgadmin:

# networks:
#   app-network:
#     driver: bridge

# volumes:
#   postgres_data:
